#!/usr/bin/env ruby
tophat_sam = ARGV[0]
truth_sam = ARGV[1]
out_file = ARGV[2]

def within?(num1,num2)
  num1 = num1.to_i
  num2 = num2.to_i
  (num1 - num2).abs <= 10000
end

truth = Hash.new


File.open(truth_sam).each do |line|
  line.chomp!
  #seq.11149425  163 chr1  16095963  25  100M  = 16096029  165 CTCGGGGGCGGACTCCGGGCGCAGCCTTCGCGTCCGGATCGCGGTGACAAGCGCCTCCGGGGCCAGGAGCTGGGCTGTCTGGCGCAGGGAGAGTGAGGAC  * MD:Z:100  IH:i:1  HI:i:1  NM:i:0  XO:A:F
  info = line.split("\t")
  flag = info[1].to_i.to_s(2).split("").reverse()
  if flag[6] == "1"
    seq = info[0] + "a"
  else
    seq = info[0] + "b"
  end
  begin
    xs_tag = line.split("XS:A:")[1].split("\t")[0]
  rescue
    xs_tag = "0"
  end
  begin
    ih_tag = line.split("IH:i:")[1].split("\t")[0]
  rescue
    ih_tag = "BALALALAAAAAA"
  end
  begin
    hi_tag = line.split("HI:i:")[1].split("\t")[0]
  rescue
    hi_tag = "BALALALAAAAAAfsdjkfsdkjfj"
  end
  truth[seq] = [info[1], info[2], info[3], info[5], info[6], info[7], info[8], info[4],xs_tag,ih_tag,hi_tag]
end

results = Hash.new()
seen_sequences = []
out_file_handler = File.open(out_file, "w")
# SequenceID TP FN PartiallyCorrect FP MateAlignedCorrectly?
File.open(tophat_sam).each do |line|
  line.chomp!
  line.gsub!(/NM:i:[1-9]/,"NM:i:0")
  line.gsub!(/XO:i:[0-9]/,"")
  line.gsub!(/AS:i:[0-9]/,"")
  line.gsub!(/XN:i:[0-9]/,"")
  line.gsub!(/XM:i:[0-9]/,"")
  line.gsub!(/NH:i:[0-9]/,"")
  line.gsub!(/XG:i:[0-9]/,"")
  line.gsub!(/AS:i:-14/,"")
  line.gsub!(/CP:i:[0-9]+/,"")
  line.gsub!(/YT:Z:UU/,"")
  line.gsub!(/CC:Z:=/,"")
  line.gsub!(/HI:i:[0-9]/,"")
  line.gsub!(/NM:i:[0-9]/,"")
  info = line.split(" ")
  #flag = info[1].to_i.to_s(2).split("").reverse()
  #if flag[6] == "1"
  #  seq = info[0] + "a"
  #else
  #  seq = info[0] + "b"
  #end
  #info[0] = seq
  # Sequence in truth file?
  xs_tag = ""
  if truth[info[0]]
    #puts truth[info[0]].join(":::")
    #puts info.join(":::")
    begin
      xs_tag = line.split("XS:A:")[1].split("\t")[0]
    rescue
      xs_tag = "0"
    end
    if (info[2] == truth[info[0]][1] && info[3] == truth[info[0]][2] && info[5] == truth[info[0]][3] && info[7] == truth[info[0]][5] && xs_tag == truth[info[0]][8])
      results[info[0]] = [1,0,0,0,1]
    elsif info[2] == truth[info[0]][1] && info[3] == truth[info[0]][2] && info[5] == truth[info[0]][3]
      results[info[0]] = [1,0,0,0,0]
    elsif info[2] == truth[info[0]][1] && within?(info[3],truth[info[0]][2]) && info[7] == truth[info[0]][5]
      results[info[0]] = [0,0,1,0,1]
    elsif info[2] == truth[info[0]][1] && within?(info[3],truth[info[0]][2])
      results[info[0]] = [0,0,1,0,0]
    elsif info[7] == truth[info[0]][5]
      results[info[0]] = [0,0,0,1,1]
    else
      results[info[0]] = [0,0,0,1,0]
    end
    #truth.delete(info[0])
  else
    results[info[0]] = [0,0,0,1,"-"]
  end
  info[10] = "*"

  info << "IH:i:#{truth[info[0]][9]}"
  info << "HI:i:#{truth[info[0]][10]}"
  info << "NM:i:0"
  info << "XO:A:F"
  info.keep_if { |v| !(v =~ /XS:A/)}
  info << "XS:A:#{xs_tag}" unless xs_tag == ""
  info[4] = truth[info[0]][7]
  seen_sequences << info[0]
  puts "#{info[0]}\t#{results[info[0]].join("\t")}"
  if info[8] == truth[info[0]][6]
    info[0] = info[0].delete("a")
    info[0] = info[0].delete("b")
    out_file_handler.puts info.join("\t")
  else
    info[8] = truth[info[0]][6]
    info[0] = info[0].delete("a")
    info[0] = info[0].delete("b")
    out_file_handler.puts info.join("\t")
  end


  #if truth[info[0]]
  #  # Correctly mapped?
  #  if info[2] == truth[info[0]][1] && info[3] == truth[info[0]][2] && info[5] == truth[info[0]][3]
  #    results[info[0]] = [1,0,0,0,0]
  #  elsif info[2] == truth[info[0]][1] && info[3] == truth[info[0]][2]
  #    results[info[0]] = [0,0,1,0,0]
  #  else
  #    results[info[0]] = [0,0,0,1,0]
  #  end
  #else
  #  results[info[0]] = [0,0,0,1,"-"]
  #end
  #puts results[info[0]].join(":")
end

truth.each_key do |key|
  #puts key
  next if seen_sequences.include?(key)
  results[key] = [0,1,0,0,"-"]
  puts "#{key}\t#{results[key].join("\t")}"
end

  #puts truth




