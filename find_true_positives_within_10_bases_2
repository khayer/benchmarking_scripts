#!/usr/bin/env ruby

transcript_file = ARGV[0]
truth_file = ARGV[1]
gene_info = ARGV[2]

### Functions

def exons_are_within?(exon_positions,all_actual_exon_positions)
  all_actual_exon_positions.each do |actual_exon_position|
    next if actual_exon_position.length != exon_positions.length
    are_within_answer = true
    exon_positions.each_with_index do |pos,i|
      are_within_answer = are_within?(pos,actual_exon_position[i])
      break unless are_within_answer == true
    end
    return true if are_within_answer == true
  end
  false
end

def are_within?(pos,actual_pos)
  l = ( pos > (actual_pos - 1000) && pos < ( actual_pos + 1000 ))
  l
end

### Main

all_exon_positions = Array.new
exon_positions = Array.new
info = ""
chr = "chr1"

File.open(transcript_file).each do |line|
  next if line =~ /cov\ \"0\.000000\"/
  line.chomp!
  info = line.split("\t")
  if line =~ /\ttranscript\t/
    all_exon_positions << [chr, exon_positions.sort ].flatten()
    chr = info[0]
    exon_positions = Array.new
    next
  end
  left_boundary = info[3].to_i
  exon_positions << left_boundary
  right_boundary = info[4].to_i
  exon_positions << right_boundary
end

all_exon_positions << [chr, exon_positions.sort ].flatten()

### First entry is empty
all_exon_positions.delete_at(0)
number_of_all_genes = all_exon_positions.length
all_actual_exon_positions = Array.new
false_positives = Array.new
exon_positions = Array.new
info = ""
chr = "chr1"
File.open(truth_file).each do |line|
  line.chomp!
  info = line.split("\t")
  next if line =~ /--------------/
  next if line =~ /Type/
  next if line =~ /GENE/
  next if line =~ /intron/
  if line =~ /transcript/
    all_actual_exon_positions << [chr, exon_positions.sort ].flatten()
    chr = info[-2].split(":")[0]
    exon_positions = Array.new
    if line.split("\t")[-1].to_i == 0
      false_positives << true
    else
      false_positives << false
    end
    next
  end
  info = line.split("\t")
  positions = info[-2].split(":")[1]
  start_position = positions.split("-")[0].to_i
  end_position = positions.split("-")[1].to_i
  exon_positions << start_position
  exon_positions << end_position
end
all_actual_exon_positions.delete_at(0)
all_actual_exon_positions << [chr,exon_positions.sort ].flatten

### Are all exons correct?
strongly_true_positives = 0
strongly_true_positives2 = 0
strongly_false_positives = 0
strongly_true_positives_by_exon_count = Array.new()
strongly_true_positives2_by_exon_count = Array.new()
strongly_false_positives_by_exon_count = Array.new()

double = false
all_exon_positions.each do |exon_positions|
  number = ((exon_positions.length-1) / 2 )
  pos_in_array = all_actual_exon_positions.index(exon_positions)
  pos2_in_array = all_exon_positions.index(exon_positions)
  pos3_in_array = all_exon_positions.length - 1 - all_exon_positions.reverse.index(exon_positions)

  double = true if pos2_in_array != pos3_in_array
  if double
    pos_in_array = nil
  end
  #false_positives[pos_in_array]
  if pos_in_array
    unless false_positives[pos_in_array]
      strongly_true_positives += 1
      strongly_true_positives_by_exon_count[number] = 0 unless strongly_true_positives_by_exon_count[number]
      strongly_true_positives_by_exon_count[number] += 1
    else
      strongly_true_positives2 += 1
      strongly_true_positives2_by_exon_count[number] = 0 unless strongly_true_positives2_by_exon_count[number]
      strongly_true_positives2_by_exon_count[number] += 1
    end
  else
    double = false
    strongly_false_positives += 1
    strongly_false_positives_by_exon_count[number] = 0 unless strongly_false_positives_by_exon_count[number]
    strongly_false_positives_by_exon_count[number] += 1
  end
end

### Are the starts and end within 10 base pairs?

#within_true_positives = 0
#within_false_positives = 0
#within_true_positives_by_exon_count = Array.new()
#within_false_positives_by_exon_count = Array.new()
#
#all_exon_positions.each do |exon_positions|
#  number = (exon_positions.length / 2 )
#  if exons_are_within?(exon_positions,all_actual_exon_positions)
#    within_true_positives += 1
#    within_true_positives_by_exon_count[number] = 0 unless within_true_positives_by_exon_count[number]
#    within_true_positives_by_exon_count[number] += 1
#  else
#    within_false_positives += 1
#    within_false_positives_by_exon_count[number] = 0 unless within_false_positives_by_exon_count[number]
#    within_false_positives_by_exon_count[number] += 1
#  end
#end

### Are all inner exons correct?

all_actual_inner_exon_positions = Array.new
all_actual_exon_positions.each do |actual_exon_positions|
  actual_exon_positions.delete_at(1)
  actual_exon_positions.delete_at(-1)
  all_actual_inner_exon_positions << actual_exon_positions
end

all_inner_exon_positions = Array.new
all_exon_positions.each do |exon_positions|
  exon_positions.delete_at(1)
  exon_positions.delete_at(-1)
  all_inner_exon_positions << exon_positions
end

weakly_true_positives = 0
weakly_true_positives2 = 0
weakly_false_positives = 0
positions_of_true_positives = Array.new
weakly_true_positives_by_exon_count = Array.new
weakly_true_positives2_by_exon_count = Array.new
weakly_false_positives_by_exon_count = Array.new
double = false

all_inner_exon_positions.each do |inner_exon_positions|
  if inner_exon_positions.length == 1
    weakly_true_positives_by_exon_count[1] = 0 unless weakly_true_positives_by_exon_count[1]
    weakly_true_positives_by_exon_count[1] += 1
    weakly_true_positives += 1
    next
  end
  number = ((inner_exon_positions.length-1) / 2 ) + 1

  pos_in_array = all_actual_inner_exon_positions.index(inner_exon_positions)
  pos2_in_array = all_inner_exon_positions.index(inner_exon_positions)
  pos3_in_array = all_inner_exon_positions.length - 1 - all_inner_exon_positions.reverse.index(inner_exon_positions)

  double = true if pos2_in_array != pos3_in_array
  if double
    pos_in_array = nil
  end

  if pos_in_array
    unless false_positives[pos_in_array]
      positions_of_true_positives << inner_exon_positions
      weakly_true_positives_by_exon_count[number] = 0 unless weakly_true_positives_by_exon_count[number]
      weakly_true_positives_by_exon_count[number] += 1
      weakly_true_positives += 1
    else
      weakly_true_positives2_by_exon_count[number] = 0 unless weakly_true_positives2_by_exon_count[number]
      weakly_true_positives2_by_exon_count[number] += 1
      weakly_true_positives2 += 1
    end
  else
    #puts inner_exon_positions.join("\t")
    #puts double
    #STDIN.gets
    double = false
    weakly_false_positives_by_exon_count[number] = 0 unless weakly_false_positives_by_exon_count[number]
    weakly_false_positives_by_exon_count[number] += 1
    weakly_false_positives += 1
  end
end

### Are the starts and end within 10 base pairs (inner Exons)?

#within_inner_true_positives = 0
#within_inner_false_positives = 0
#within_inner_true_positives_by_exon_count = Array.new()
#within_inner_false_positives_by_exon_count = Array.new()
#
#all_inner_exon_positions.each do |inner_exon_positions|
#  number = (inner_exon_positions.length / 2 )
#  if exons_are_within?(inner_exon_positions,all_actual_inner_exon_positions)
#    within_inner_true_positives += 1
#    within_inner_true_positives_by_exon_count[number] = 0 unless within_inner_true_positives_by_exon_count[number]
#    within_inner_true_positives_by_exon_count[number] += 1
#  else
#    within_inner_false_positives += 1
#    within_inner_false_positives_by_exon_count[number] = 0 unless within_inner_false_positives_by_exon_count[number]
#    within_inner_false_positives_by_exon_count[number] += 1
#  end
#end


start_end_number_of_splice_forms = []
current_splice_forms = []
statistics = []

location = "chr1"
start_position = 0
max = 0
min = 0

File.open(gene_info).each do |line|
  line.chomp!
  info = line.split("\t")
  start_position = info[2].to_i
  end_position = info[3].to_i
  if (info[0] != location)
    start_end_number_of_splice_forms << [location, min, max, current_splice_forms.length]
    max = end_position
    min = 0
    location = info[0]
    statistics[current_splice_forms.length] = 0 unless statistics[current_splice_forms.length]
    statistics[current_splice_forms.length] += 1
    current_splice_forms = []
  else
    #start_position = info[2].to_i
    #end_position = info[3].to_i
    if (max < start_position && !current_splice_forms.empty?)
      start_end_number_of_splice_forms << [location, min, start_position-1, current_splice_forms.length]
      max = end_position
      min = start_position
      statistics[current_splice_forms.length] = 0 unless statistics[current_splice_forms.length]
      statistics[current_splice_forms.length] += 1
      if current_splice_forms.length == 1
        STDERR.puts current_splice_forms[0] if current_splice_forms[0].split(".")[1].to_i > 1000 #GENE.1.0
      end
      current_splice_forms = []
      #current_splice_forms << info[-1]
      #STDERR.puts info[-1] if info[-1].split(".")[1].to_i > 1000 #GENE.1.0
    end
  end
  current_splice_forms << info[-1]
end

start_end_number_of_splice_forms << [location, min, start_position-1, current_splice_forms.length]
statistics[current_splice_forms.length] = 0 unless statistics[current_splice_forms.length]
statistics[current_splice_forms.length] += 1

STDERR.puts positions_of_true_positives.length
statistics2 = Array.new()
positions_of_true_positives.uniq!
positions_of_true_positives.each do |pos_of_TP|
  #STDERR.puts pos_of_TP.join(":")
  start_end_number_of_splice_forms.each do |actual|
    next if pos_of_TP[0] != actual[0]
    if ((pos_of_TP[1] >= actual[1]) && (pos_of_TP[1] < actual[2]))
      #STDERR.puts actual.join(":")
      #STDIN.gets
      #STDERR.puts pos_of_TP.join(":") if actual[3] == 20
      #STDERR.puts actual.join(":") if actual[3] == 20
      statistics2[actual[3]] = 0 unless statistics2[actual[3]]
      statistics2[actual[3]] += 1
      break
    end
  end
end

range = (0..20).to_a
puts "=========="
puts "#_of_Exons\t#{range.join("\t")}\t..."
puts "StroTP\t#{strongly_true_positives_by_exon_count.join("\t")}"
puts "AnnotatedFP(start&end right)\t#{strongly_true_positives2_by_exon_count.join("\t")}"
#puts "StroFP\t#{strongly_false_positives_by_exon_count.join("\t")}"
#puts "WithTP\t#{within_true_positives_by_exon_count.join("\t")}"
#puts "WithFP\t#{within_false_positives_by_exon_count.join("\t")}"
puts "WeakTP\t#{weakly_true_positives_by_exon_count.join("\t")}"
puts "AnnotatedFP(inner junctions correct)\t#{weakly_true_positives2_by_exon_count.join("\t")}"
puts "WeakFP\t#{weakly_false_positives_by_exon_count.join("\t")}"
#puts "WeWiTP\t\t#{within_inner_true_positives_by_exon_count.join("\t")}"
#puts "WeWiFP\t\t#{within_inner_false_positives_by_exon_count.join("\t")}"
puts "=========="
puts "Strongly True Positives\t#{strongly_true_positives}"
puts "AnnotatedFP(start&end right)\t#{strongly_true_positives2}"
puts "Strongly False Positives\t#{strongly_false_positives}"
#puts "Within True Positives\t#{within_true_positives}"
#puts "Within False Positives\t#{within_false_positives}"
puts "Weak True Positives\t#{weakly_true_positives}"
puts "AnnotatedFP(inner junctions correct)\t#{weakly_true_positives2}"
puts "Weak False Positives\t#{weakly_false_positives}"
#puts "Weak Within True Positives\t#{within_inner_true_positives}"
#puts "Weak Within False Positives\t#{within_inner_false_positives}"
puts "=========="
puts "All transcripts\t#{number_of_all_genes}"
puts "========== STATS"

puts "number_of_spliceforms\tTruth\tFound"
statistics.each_with_index do |stat,i|
  next unless stat
  puts "#{i}\t#{stat}\t#{statistics2[i]}"
end
