#!/usr/bin/env ruby

transcript_file = ARGV[0]
truth_file = ARGV[1]

all_exon_positions = Array.new
exon_positions = Array.new
info = ""
chr = "chr1"

File.open(transcript_file).each do |line|
  next if line =~ /cov\ \"0\.000000\"/
  line.chomp!
  info = line.split("\t")
  if line =~ /\ttranscript\t/
    all_exon_positions << [chr, exon_positions.sort ].flatten()
    chr = info[0]
    exon_positions = Array.new
    next
  end
  left_boundary = info[3].to_i
  exon_positions << left_boundary
  right_boundary = info[4].to_i
  exon_positions << right_boundary
end

all_exon_positions << [chr, exon_positions.sort].flatten()
### First entry is empty
all_exon_positions.delete_at(0)
number_of_all_genes = all_exon_positions.length

start_end_number_of_splice_forms = []
current_splice_forms = []
statistics = []

location = "chr1"
start_position = 0
all_actual_exon_positions = Array.new
actual_exon_positions = Array.new
max = 0
min = 0

File.open(truth_file).each do |line|
  next unless line =~ /^chr/
  line.chomp!
  info = line.split("\t")
  start_position = info[1].to_i + 1
  end_position = info[2].to_i
  if (info[0] != location)
    start_end_number_of_splice_forms << [location, min, max, current_splice_forms.length, current_splice_forms.join(",")]
    max = end_position
    min = 0
    location = info[0]
    statistics[current_splice_forms.length] = 0 unless statistics[current_splice_forms.length]
    statistics[current_splice_forms.length] += 1
    current_splice_forms = []
  else
    if (max < start_position && !current_splice_forms.empty?)
      start_end_number_of_splice_forms << [location, min, start_position-1, current_splice_forms.length, current_splice_forms.join(",")]
      max = end_position
      min = start_position
      statistics[current_splice_forms.length] = 0 unless statistics[current_splice_forms.length]
      statistics[current_splice_forms.length] += 1
      current_splice_forms = []
    end
  end
  lengths = info[10].split(",")
  offsets = info[11].split(",")
  actual_exon_positions = Array.new
  lengths.each_with_index do |len,i|
    inner_start = start_position + offsets[i].to_i
    inner_end = inner_start + len.to_i - 1
    actual_exon_positions << inner_start
    actual_exon_positions << inner_end
  end
  all_actual_exon_positions << [info[0], actual_exon_positions.sort].flatten
  current_splice_forms << info[3]
end

#puts start_end_number_of_splice_forms[0].join("::")
#puts start_end_number_of_splice_forms[1].join("::")
#puts start_end_number_of_splice_forms[2].join("::")

start_end_number_of_splice_forms.each do |nina|
  puts nina.join(":") if nina[3] > 2
end
exit
#
#exit

### Are all exons correct?
strongly_true_positives = 0
strongly_true_positives2 = 0
strongly_false_positives = 0
strongly_true_positives_by_exon_count = Array.new()
strongly_false_positives_by_exon_count = Array.new()
strongly_true_positives_by_spliceforms = Array.new()
strongly_false_positives_by_spliceforms = Array.new()

weakly_true_positives_by_spliceforms = Array.new()
weakly_false_positives_by_spliceforms = Array.new()

double = false
all_exon_positions.each do |exon_positions|
  number_of_exons = ((exon_positions.length-1) / 2 )
  pos_in_array = all_actual_exon_positions.index(exon_positions)
  pos2_in_array = all_exon_positions.index(exon_positions)
  pos3_in_array = all_exon_positions.length - 1 - all_exon_positions.reverse.index(exon_positions)

  double = true if pos2_in_array != pos3_in_array
  pos_in_array = nil if double
  is_one_exon = true if exon_positions.length == 3
  is_one_exon = nil if double
  if pos_in_array
    strongly_true_positives += 1
    strongly_true_positives_by_exon_count[number_of_exons] = 0 unless strongly_true_positives_by_exon_count[number_of_exons]
    strongly_true_positives_by_exon_count[number_of_exons] += 1
    start_end_number_of_splice_forms.each do |actual|
      next if exon_positions[0] != actual[0]
      if ((exon_positions[1] >= actual[1]) && (exon_positions[1] < actual[2]))
        strongly_true_positives_by_spliceforms[actual[3]] = 0 unless strongly_true_positives_by_spliceforms[actual[3]]
        strongly_true_positives_by_spliceforms[actual[3]] += 1
        break
      end
    end
    if is_one_exon
        is_one_exon = false
        start_end_number_of_splice_forms.each do |actual|
          next if exon_positions[0] != actual[0]
          if ((exon_positions[1] >= actual[1]) && (exon_positions[1] < actual[2]))
            weakly_true_positives_by_spliceforms[actual[3]] = 0 unless weakly_true_positives_by_spliceforms[actual[3]]
            weakly_true_positives_by_spliceforms[actual[3]] += 1
            break
          end
        end
      end
  else
    double = false
    strongly_false_positives += 1
    strongly_false_positives_by_exon_count[number_of_exons] = 0 unless strongly_false_positives_by_exon_count[number_of_exons]
    strongly_false_positives_by_exon_count[number_of_exons] += 1
    start_end_number_of_splice_forms.each do |actual|
      next if exon_positions[0] != actual[0]
      if ((exon_positions[1] >= actual[1]) && (exon_positions[1] < actual[2]))
        strongly_false_positives_by_spliceforms[actual[3]] = 0 unless strongly_false_positives_by_spliceforms[actual[3]]
        strongly_false_positives_by_spliceforms[actual[3]] += 1
        break
      end
      if is_one_exon
        is_one_exon = false
        start_end_number_of_splice_forms.each do |actual|
          next if exon_positions[0] != actual[0]
          if ((exon_positions[1] >= actual[1]) && (exon_positions[1] < actual[2]))
            weakly_false_positives_by_spliceforms[actual[3]] = 0 unless weakly_false_positives_by_spliceforms[actual[3]]
            weakly_false_positives_by_spliceforms[actual[3]] += 1
            break
          end
        end
      end
    end
  end
end

### Only inner Exons
all_actual_inner_exon_positions = Array.new
all_actual_exon_positions.each do |actual_exon_positions|
  actual_exon_positions.delete_at(1)
  actual_exon_positions.delete_at(-1)
  all_actual_inner_exon_positions << actual_exon_positions if actual_exon_positions.length > 1
end

all_inner_exon_positions = Array.new
all_exon_positions.each do |exon_positions|
  exon_positions.delete_at(1)
  exon_positions.delete_at(-1)
  all_inner_exon_positions << exon_positions if exon_positions.length > 1
end

number_of_all_genes_inner = all_inner_exon_positions.length
weakly_true_positives = 0
weakly_false_positives = 0
positions_of_true_positives = Array.new
weakly_true_positives_by_exon_count = Array.new
weakly_false_positives_by_exon_count = Array.new
double = false

all_inner_exon_positions.each do |inner_exon_positions|
  if inner_exon_positions.length == 1
    weakly_true_positives_by_exon_count[1] = 0 unless weakly_true_positives_by_exon_count[1]
    weakly_true_positives_by_exon_count[1] += 1
    weakly_true_positives += 1
    next
  end
  number_of_exons = ((inner_exon_positions.length-1) / 2 ) + 1
  pos_in_array = all_actual_inner_exon_positions.index(inner_exon_positions)
  pos2_in_array = all_inner_exon_positions.index(inner_exon_positions)
  pos3_in_array = all_inner_exon_positions.length - 1 - all_inner_exon_positions.reverse.index(inner_exon_positions)
  double = true if pos2_in_array != pos3_in_array
  if double
    pos_in_array = nil
  end
  if pos_in_array
    positions_of_true_positives << inner_exon_positions
    weakly_true_positives_by_exon_count[number_of_exons] = 0 unless weakly_true_positives_by_exon_count[number_of_exons]
    weakly_true_positives_by_exon_count[number_of_exons] += 1
    weakly_true_positives += 1
    start_end_number_of_splice_forms.each do |actual|
      next if inner_exon_positions[0] != actual[0]
      if ((inner_exon_positions[1] >= actual[1]) && (inner_exon_positions[1] < actual[2]))
        weakly_true_positives_by_spliceforms[actual[3]] = 0 unless weakly_true_positives_by_spliceforms[actual[3]]
        weakly_true_positives_by_spliceforms[actual[3]] += 1
        break
      end
    end
  else
    double = false
    weakly_false_positives_by_exon_count[number_of_exons] = 0 unless weakly_false_positives_by_exon_count[number_of_exons]
    weakly_false_positives_by_exon_count[number_of_exons] += 1
    weakly_false_positives += 1
    start_end_number_of_splice_forms.each do |actual|
      next if inner_exon_positions[0] != actual[0]
      if ((inner_exon_positions[1] >= actual[1]) && (inner_exon_positions[1] < actual[2]))
        weakly_false_positives_by_spliceforms[actual[3]] = 0 unless weakly_false_positives_by_spliceforms[actual[3]]
        weakly_false_positives_by_spliceforms[actual[3]] += 1
        break
      end
    end
  end
end

range = (0..20).to_a
puts "=========="
puts "#_of_Exons\t#{range.join("\t")}\t..."
puts "StrongTP\t#{strongly_true_positives_by_exon_count.join("\t")}"
puts "NOT StrongTP\t#{strongly_false_positives_by_exon_count.join("\t")}"
puts "WeakTP\t#{weakly_true_positives_by_exon_count.join("\t")}"
puts "allFP\t#{weakly_false_positives_by_exon_count.join("\t")}"
puts "=========="
puts "By number of splice forms:"
puts "\t\t#{(1..10).to_a.join("\t")}"
puts "StroTP\t#{strongly_true_positives_by_spliceforms.join("\t")}"
puts "NOT StrongTP\t#{strongly_false_positives_by_spliceforms.join("\t")}"
puts "WeakTP\t#{weakly_true_positives_by_spliceforms.join("\t")}"
puts "allFP\t#{weakly_false_positives_by_spliceforms.join("\t")}"
puts "=========="
puts "Strongly True Positives\t#{strongly_true_positives}"
puts "Not Strong Positives\t#{strongly_false_positives}"
puts "Weak True Positives\t#{weakly_true_positives}"
puts "All False Positives\t#{weakly_false_positives}"
puts "=========="
puts "All transcripts\t#{number_of_all_genes}\tmore than 1 exon\t#{number_of_all_genes_inner}"
puts "number_of_spliceforms\tTruth\tFound"
statistics.each_with_index do |stat,i|
  next unless stat
  puts "#{i}\t#{stat}"#\t#{statistics2[i]}"
end

