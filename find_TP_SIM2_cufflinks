#!/usr/bin/env ruby

usage =<<EOF

      #{$0} truth ex_levels gtf iso num

      ------------------------------------------------------
      * truth    :: simulated_reads_transcripts_test2.txt
      * ex_levels:: expression_levels.txt
                    from: create_expression_level_sh
      * gtf      :: transcripts.gtf
      * iso      :: isoforms.fpkm_tracking
      * num      :: num reflects how many genes are used
                    from ex_levels
      ------------------------------------------------------

      Finds True Positives in cufflinks data.

                                                   by khayer

EOF

if ARGV.length != 5
  puts usage
  exit
end

### Functions
def get_truth_genes(truth)
  truth_genes = []
  starts = []
  stops = []
  name = ""
  File.open(truth).each do |line|
    if line =~ /-------/
      #### add CHR
      truth_genes << [name, starts, stops].flatten
      starts = []
      stops = []
      name = ""
    end
    name = line.split(" = ")[1] if line =~ /^genes/
    if line =~ /chr[0-9]+:/
      boarders = line.split(":")[1].split("-") #chr1:3660633-3661579
      starts << boarders[0]
      stops << boarders[1]
    end
  end
  truth_genes
end

def get_expression_levels(ex_levels)
  sorted_expression_levels = Hash.new()
  File.open(ex_levels).each do |line|
    next unless line =~ /^GENE/
    line.chomp!
    sorted_expression_levels[line.split("\t")[0]] = line.split("\t")[1].to_f
  end
  sorted_expression_levels = sorted_expression_levels.sort_by {|key, value| value}.reverse
end

def get_genes_that_should_be_in_gtf(sorted_expression_levels,num)
  genes_that_should_be_in_gtf = []
  sorted_expression_levels.each do |key, value|
    genes_that_should_be_in_gtf << key
    num -= 1
    break if num == 0
  end
  genes_that_should_be_in_gtf
end

def get_genes_that_pass_fpkm_value(iso)
  genes_that_pass_fpkm_value = []
  File.open(iso).each do |line|
    next unless line =~ /^CUFF/
    line.chomp!
    iso_fields = line.split("\t")
    genes_that_pass_fpkm_value << iso_fields[0] if iso_fields[-1] == "OK"
  end
  genes_that_pass_fpkm_value
end

def get_cufflinks_genes(gtf)
  cufflinks_genes = []
  File.open(gtf).each do |line|

  end
end

#############

### Main

truth = ARGV[0]
ex_levels = ARGV[1]
gtf = ARGV[2]
iso = ARGV[3]
num = ARGV[4].to_i

truth_genes = get_truth_genes(truth)
sorted_expression_levels = get_expression_levels(ex_levels)
genes_that_should_be_in_gtf = get_genes_that_should_be_in_gtf(sorted_expression_levels,num)
genes_that_pass_fpkm_value = get_genes_that_pass_fpkm_value(iso)
cufflinks_genes = get_cufflinks_genes(gtf)

########
