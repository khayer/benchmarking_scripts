#!/usr/bin/env ruby

usage =<<EOF

      #{$0} sorted_sam_file results

      ------------------------------------------------------
      * fwd      :: fwd.fa/fq
      * rev      :: rev.fa/fq
      ------------------------------------------------------

      Run Trinity on forward.fa and reverse.fa

      Note:
      sed 's/a/\/1/g' *fwd.fa > simulated_reads_test2_fwd_tri.fa
      sed 's/b/\/2/g' *rev.fa > simulated_reads_test2_rev_tri.fa


                                                   by khayer

EOF

if ARGV.length != 2
  puts usage
  exit
end

### Settings
$trinity = "~/Downloads/trinityrnaseq_r2012-10-05/Trinity.pl"
$aligner = "~/Downloads/trinityrnaseq_r2012-10-05/util/alignReads.pl"
# alignReads.pl --left fwd.fa --right rev.fa --seqType fa
# --target trinity/Trinity.fasta --aligner bowtie -- -p 2
# > trinity_realign.log 2>&1
$rsem = "~/Downloads/trinityrnaseq_r2012-10-05/util/RSEM_util/run_RSEM.pl"
# run_RSEM.pl --transcript trinity/Trinity.fasta
# --name_sorted_bam bowtie_out/bowtie_out.nameSorted.PropMapPairsForRSEM.bam
# --paired > trinity_rsem.log 2>&1

############

### Functions
def run_trinity(fwd, reverse)
  # Trinity.pl --seqType fa --JM 5G --CPU 2 --output trinity/
  # --left fwd.fa --right rev.fa > trinity.log 2>&1
  cmd = `#{$trinity} -seqType fa --JM 5G --CPU 2 --output trinity/ --left #{fwd} --right #{rev.fa} > trinity.log 2>&1`
end

def run_aligner(ex_levels)

end

def run_rsem(sorted_expression_levels,num)

end

def get_chromosome_lengths(sam_file)
  chromosome_lengths = {}
  File.open(sam_file).each do |line|
    line.chomp!
    break unless line =~ /^@/
    next unless line =~ /^@SQ/
    fields = line.split(":")
    length = fields[-1]
    chr = fields[1].split(" ")[0]
    chromosome_lengths[chr] = length
  end
  chromosome_lengths
end


#############

### Main
sam = ARGV[0]
results = ARGV[1]
region_start = 0

chromosome_lengths = get_chromosome_lengths(sam)
current_chromosome = "chrXY"
PositiveInfinity = +1.0/0.0
NegativeInfinity = -1.0/0.0
smallest = PositiveInfinity
highest = NegativeInfinity
fwd_reads = {}
rev_reads = {}
sequence_names = []

File.open(sam).each do |line|
  line.chomp!
  # Get rid of header
  next if line =~ /^@/
  sam_fields = line.split(" ")
  # Get rid if pair did not in same area
  next if sam_fields[4] == "0"
  length = sam_fields[5].split(/\D/).inject{|sum,x| sum.to_i + x.to_i }
  if sam_fields[3].to_i > highest || current_chromosome != sam_fields[2]
    puts "area start #{highest}"
    puts fwd_reads
    puts rev_reads
    fwd_reads = {}
    rev_reads = {}
    puts length
    highest = sam_fields[3].to_i + length.to_i
    current_chromosome = sam_fields[2]
    STDIN.gets
  end
  highest = sam_fields[3].to_i + length.to_i
  sequence_names << sam_fields[0] unless sequence_names.include?(sam_fields[0])
  # is first pair?
  bit_flag = sam_fields[1].to_i
  if bit_flag[6] == 1
    fwd_reads[sam_fields[0]] = sam_fields[9]
  else
    rev_reads[sam_fields[0]] = sam_fields[9]
  end
end

########
