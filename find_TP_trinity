#!/usr/bin/env ruby

#### METHODS

def search_in(current_sequence)
  result = [0, ""]
  current_sequence_complement = get_reverse_complement(current_sequence)
  ind1 = $truth_sequences.key(current_sequence_complement)
  ind2 = $truth_sequences.key(current_sequence)
  if ind1
    $truth_sequences.delete(ind1)
    $truth_sequences.delete(ind2)
    result = [2, ind1]
  elsif ind2
    $truth_sequences.delete(ind2)
    result = [2, ind2]
  else
    begin
      current_sequence_regexp = Regexp.new current_sequence
      current_sequence_complement_regexp = Regexp.new current_sequence_complement
      matching_sequence = $truth_sequences.inject([]) { |res, kv| res << kv if (kv[1] =~ current_sequence_regexp || kv[1] =~ current_sequence_complement_regexp); res  }
    rescue
      matching_sequence = $truth_sequences.inject([]) { |res, kv| res << kv unless (kv[1].scan(current_sequence).empty?) && (kv[1].scan(current_sequence_complement).empty?); res  }
    end
    matching_sequence.flatten!
    if matching_sequence[1]
      if length_diff(matching_sequence[1],current_sequence) > 500
        result = [0, matching_sequence[0]]
      #elsif length_diff(matching_sequence[1],current_sequence) == 0
      #  result = [2, matching_sequence[0]]
      #  $truth_sequences.delete(matching_sequence[0])
      else
        result = [1, matching_sequence[0]]
        $truth_sequences.delete(matching_sequence[0])
      end
    end
  end
  result

  #if helper
  #ind1 = $truth_sequences.index(current_sequence_complement)
  #ind2 = $truth_sequences.index(current_sequence)
  #if ind1
  #  $truth_sequences.delete(ind1)
  #  $truth_sequences.delete(ind2)
  #  result = [2, ind1]
  #elsif ind2
  #  $truth_sequences.delete(ind2)
  #  result = [2, ind2]
  #else
  #  $truth_sequences.each do |key, sequence|
  #    next if current_sequence.length > sequence.length
  #    #if sequence == current_sequence || sequence == current_sequence_complement
  #    #  $truth_sequences.delete(key)
  #    #  result = [2, key]
  #    #  break
  #    #end
#
  #    current_sequence_regexp = Regexp.new current_sequence
  #    current_sequence_complement_regexp = Regexp.new current_sequence_complement
  #    if (sequence  =~ current_sequence_regexp) || (sequence  =~ current_sequence_complement_regexp)
  #      if length_diff(sequence,current_sequence) > 500
  #        result = [0, key]
  #        break
  #      else
  #        $truth_sequences.delete(key)
  #        result = [1, key]
  #        break
  #      end
  #    end
  #  end
  #end
  result
end

def length_diff(seq1,seq2)
  (seq1.length - seq2.length).abs
end

def get_reverse_complement(seq)
  seq_complement = ""
  seq.split("").reverse.each do |base|
    case base
    when "A"
      seq_complement += "T"
    when "T"
      seq_complement += "A"
    when "C"
      seq_complement += "G"
    when "G"
      seq_complement += "C"
    end
  end
  #puts seq
  #puts seq_complement
  #exit
  seq_complement
end

unless ARGV.length == 3
  puts ""
  puts "  Usage:" 
  puts "  find_TP_trinity trinity.fa RSEM.isoform.results truth_sequences_fa"
  puts ""
  exit
end

trinity_file = ARGV[0]
rsem = ARGV[1]
truth_sequences_file = ARGV[2]

$truth_sequences = Hash.new()
key = ""
File.open(truth_sequences_file).each do |line|
  line.chomp!
  if line =~ /^>/
    key = line.split(":")[0].split(">")[1] #>GENE.1.0:chr1:4797973-4836816_+
  else
    $truth_sequences[key] = line
  end
end

$expressed_isoforms = []
File.open(rsem).each do |line|
  next unless line =~ /^comp/
  line.chomp!
  info = line.split("\t")
  iso_pct = info[-1].to_f
  $expressed_isoforms << info[0] if iso_pct > 10.00
end

#puts $expressed_isoforms.join("::")
#exit


current_sequence = ""
false_positive = 0
weak_true_positive = 0
strong_true_positive = 0
weak_true_positive_by_spliceform = []
strong_true_positives_by_spliceforms = []
weak_false_positives_by_spliceforms = []

number_of_all_genes = 0
current_comp_name = ""

File.open(trinity_file).each do |line|
  
  line.chomp!
  if line =~ /^>/ && current_sequence != "" && $expressed_isoforms.include?(current_comp_name)
    number_of_all_genes += 1
    STDERR.puts "#{( number_of_all_genes.to_f / 62059 )*100} %"
    #STDERR.puts "#{( number_of_all_genes.to_f / 66 ).to_f} %"
    result = search_in(current_sequence)
    current_sequence = ""
    case result[0]
    when 0
      #puts "NEGATIVE"
      false_positive += 1
      #if result[1] != ""
      number = (result[1].split(".")[1].to_i / 1000).floor + 1 #GENE.1802.1
      #puts number
      weak_false_positives_by_spliceforms[number] = 0 unless weak_false_positives_by_spliceforms[number]
      weak_false_positives_by_spliceforms[number] += 1
      #end
    when 1
      #puts "WEAK"
      weak_true_positive += 1
      number = (result[1].split(".")[1].to_i / 1000).floor + 1 #GENE.1802.1
      #puts number
      weak_true_positive_by_spliceform[number] = 0 unless weak_true_positive_by_spliceform[number]
      weak_true_positive_by_spliceform[number] += 1
    when 2
      #puts "STRONG"
      strong_true_positive += 1
      weak_true_positive += 1
      number = (result[1].split(".")[1].to_i / 1000).floor + 1 #GENE.1802.1
      #puts number
      weak_true_positive_by_spliceform[number] = 0 unless weak_true_positive_by_spliceform[number]
      weak_true_positive_by_spliceform[number] += 1
      strong_true_positives_by_spliceforms[number] = 0 unless strong_true_positives_by_spliceforms[number]
      strong_true_positives_by_spliceforms[number] += 1
    end
  end

  if line =~ /^>/
    current_comp_name = line.split(" ")[0].split(">")[1]
    current_sequence = ""
    next
  end
  current_sequence += line
end

puts false_positive
puts weak_true_positive
puts strong_true_positive

puts "=========="
puts "By number of splice forms:"
puts "\t\t#{(1..10).to_a.join("\t")}"
puts "StroTP\t#{strong_true_positives_by_spliceforms.join("\t")}"
puts "WeakTP\t#{weak_true_positive_by_spliceform.join("\t")}"
puts "allFP\t#{weak_false_positives_by_spliceforms.join("\t")}"
puts "=========="
puts "Strongly True Positives\t#{strong_true_positive}"
#puts "AnnotatedFP(start&end right)\t#{strongly_true_positives2}"
#puts "Not Strong Positives\t#{strongly_false_positives}"
##puts "Within True Positives\t#{within_true_positives}"
##puts "Within False Positives\t#{within_false_positives}"
puts "Weak True Positives\t#{weak_true_positive}"
#puts "AnnotatedFP(inner junctions correct)\t#{weakly_true_positives2}"
puts "All False Positives\t#{false_positive}"
##puts "Weak Within True Positives\t#{within_inner_true_positives}"
##puts "Weak Within False Positives\t#{within_inner_false_positives}"
puts "=========="
puts "All transcripts\t#{number_of_all_genes}"



