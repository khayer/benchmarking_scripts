#!/usr/bin/env ruby
require 'optparse'
require 'logger'
require 'spreadsheet'
require "csv"
require 'set'

# 2014/2/4 Katharina Hayer

$logger = Logger.new(STDERR)

# Initialize logger
def setup_logger(loglevel)
  case loglevel
  when "debug"
    $logger.level = Logger::DEBUG
  when "warn"
    $logger.level = Logger::WARN
  when "info"
    $logger.level = Logger::INFO
  else
    $logger.level = Logger::ERROR
  end
end

def setup_options(args)
  options = {:out_file =>  "overview_table.xls"}

  opt_parser = OptionParser.new do |opts|
    opts.banner = "Usage: compare_fpkm_values [options] fpkm_values.txt"
    opts.separator ""
    opts.separator "Chromosome  Position  GeneID  truth cufflinks"
    opts.separator "chr1  4280926 GENE.2  8.374260414703787 5.7120907506"
    opts.separator "chr1  4333587 GENE.3  3.6346136018274633  1.2144533063"
    opts.separator "chr1  4481008 GENE.4  7.888470678715747 7.6478274866"
    opts.separator ""

    opts.on("-o", "--out_file [OUT_FILE]",
      :REQUIRED,String,
      "File for the output, Default: overview_table.xls") do |anno_file|
      options[:out_file] = anno_file
    end

    opts.on("-v", "--[no-]verbose", "Run verbosely") do |v|
      options[:log_level] = "info"
    end

    opts.on("-d", "--debug", "Run in debug mode") do |v|
      options[:log_level] = "debug"
    end

  end

  args = ["-h"] if args.length == 0
  opt_parser.parse!(args)
  raise "Please specify the sam files" if args.length == 0
  options
end

=begin
def make_link(gene_name)
  link = "http://cancer.sanger.ac.uk/cosmic/gene/overview?ln=#{gene_name}"
end



def find_junctions(junction_files)
  junctions = {}
  junction_files.split(",").each do |file|
    #puts file
    File.open(file).each do |line|
      line.chomp!
      gene1,d,d,gene2 = line.split("\t")
      gene1.gsub!(/^hg19_refGene_/,"")
      gene2.gsub!(/^hg19_refGene_/,"")
      if gene2 =~ /^gi/
        gene2 = gene2.split("|")[-1].split(".")[0]
        gene1 = gene1.split("|")[-1].split(".")[0]
      end
      next if gene1 == gene2
      #$logger.debug(gene1)
      #$logger.debug(gene2)
      s = Set.new [gene1,gene2]
      junctions[s] = 0 unless  junctions[s]
      junctions[s] += 1
    end

  end
  junctions
end

def read_summary(fusion_table,out_file,gene_anno,cut_off,junctions)
  book = Spreadsheet::Workbook.new
  sheet1 = book.create_worksheet
  sheet1.row(0).push 'Counts', 'Gen sym 1', 'Pos 1', 'Gen sym 2',
    'Pos 2', 'Refseq 1', 'Refseq 2', 'Junctions?'
  i = 1

  tab_file_h = File.open(fusion_table)
  out_file_h = File.open(out_file,'w')
  tab_file_h.each do |line|
    line.chomp!
    next if line == ""
    counts, refseq_1, refseq_2 = line.split(" ")
    if refseq_2 =~ /^hg19/
      refseq_2.gsub!(/^hg19_refGene_/,"")
      refseq_1.gsub!(/^hg19_refGene_/,"")
    end
    if refseq_2 =~ /^gi/
      refseq_2 = refseq_2.split("|")[-1].split(".")[0]
      refseq_1 = refseq_1.split("|")[-1].split(".")[0]
    end
    $logger.debug("#{refseq_1} and #{refseq_2}")
    if gene_anno[refseq_1]
      gene_sym_1 = gene_anno[refseq_1][:name2]
      gene_sym_1_link = make_link(gene_sym_1)
      pos1 = "#{gene_anno[refseq_1][:chrom]}:#{gene_anno[refseq_1][:txStart]}-#{gene_anno[refseq_1][:txEnd]}"
    else
      pos1 = "N/A"
      gene_sym_1 = "N/A"
      gene_sym_1_link = "N/A"
    end
    if gene_anno[refseq_2]
      gene_sym_2 = gene_anno[refseq_2][:name2]
      gene_sym_2_link = make_link(gene_sym_2)
      pos2 = "#{gene_anno[refseq_2][:chrom]}:#{gene_anno[refseq_2][:txStart]}-#{gene_anno[refseq_2][:txEnd]}"
    else
      gene_sym_2 = "N/A"
      gene_sym_2_link = "N/A"
      pos2 = "N/A"
    end

    if junctions
      s = Set.new [refseq_1,refseq_2]
      junc = junctions[s]
    else
      junc = "N/A"
    end
    sheet1.update_row i, counts, Spreadsheet::Link.new(gene_sym_1_link,gene_sym_1),
      pos1,Spreadsheet::Link.new(gene_sym_2_link,gene_sym_2), pos2, refseq_1,
      refseq_2, junc
    i += 1
    break if i > cut_off
  end

  book.write out_file
end
=end

def distance(p,q)
  (Math.sqrt((p-q)**2/2)).to_f
end

def read_fpkm_values(fpkm_values)
  counter_good = 0
  counter_bad = 0
  CSV.read(fpkm_values, { :col_sep => "\t",:headers => :first_row }).each do |row|
    chr = row["Chromosome"]
    pos = row["Position"].to_i
    gene_id = row["GeneID"]
    truth_fpkm = Math.log(row["truth"].to_f)
    algo_fpkm = Math.log(row["cufflinks"].to_f)
    dis = distance(truth_fpkm,algo_fpkm)
    if dis > 1.0
      counter_bad += 1
    else
      counter_good += 1
    end
  end
  puts "counter_bad: #{counter_bad}; counter_good: #{counter_good}"
  puts "percentage bad #{counter_bad.to_f/(counter_bad+counter_good).to_f}"
end


def run(argv)
  options = setup_options(argv)
  setup_logger(options[:log_level])
  $logger.debug(options)
  $logger.debug(argv)
  #puts options[:cut_off]
  read_fpkm_values(argv[0])
end

if __FILE__ == $0
  run(ARGV)
end

