#!/usr/bin/env ruby

#### METHODS

def get_expression_levels(ex_levels)
  sorted_expression_levels = Hash.new()
  File.open(ex_levels).each do |line|
    next unless line =~ /^GENE/
    line.chomp!
    sorted_expression_levels[line.split("\t")[0]] = line.split("\t")[1].to_f
  end
  sorted_expression_levels = sorted_expression_levels.sort_by {|key, value| value}.reverse
end

def get_genes_that_should_be_in_gtf(sorted_expression_levels,num)
  genes_that_should_be_in_gtf = []
  sorted_expression_levels.each do |key, value|
    genes_that_should_be_in_gtf << key
    num -= 1
    break if num == 0
  end
  genes_that_should_be_in_gtf
end

def get_truth_sequences(truth_sequences_file)
  truth_sequences = Hash.new()
  key = ""
  File.open(truth_sequences_file).each do |line|
    line.chomp!
    if line =~ /^>/
      key = line.split(":")[0].split(">")[1] #>GENE.1.0:chr1:4797973-4836816_+
    else
      truth_sequences[key] = line
    end
  end
  truth_sequences
end

def get_expressed_isoforms(rsem)
  expressed_isoforms = []
  File.open(rsem).each do |line|
    next unless line =~ /^comp/
    line.chomp!
    info = line.split(" ")
    iso_pct = info[-1].to_f
    expressed_isoforms << info[0] if iso_pct > 10.00
  end
  expressed_isoforms
end

def get_expressed_genes(rsem2)
  expressed_genes = []
  File.open(rsem2).each do |line|
    next unless line =~ /^comp/
    line.chomp!
    info = line.split(" ")
    fpkm = info[-1].to_f
    expressed_genes << info[0] if fpkm > 100.00
  end
  expressed_genes
end

def length_diff(seq1,seq2)
  (seq1.length - seq2.length).abs
end

def get_reverse_complement(seq)
  seq_complement = ""
  seq.split("").reverse.each do |base|
    case base
    when "A"
      seq_complement += "T"
    when "T"
      seq_complement += "A"
    when "C"
      seq_complement += "G"
    when "G"
      seq_complement += "C"
    end
  end
  seq_complement
end

#### MAIN
usage =<<EOF

      #{$0} tri rsem truth ex_levels num rsem2

      ------------------------------------------------------
      * tri       :: trinity.fasta
      * rsem      :: RSEM.isoform.results
      * truth     :: truth_sequences.fasta
      * ex_levels :: expression_levels.txt
                     from: create_expression_level_sh
      * num       :: num reflects how many genes are used
                     from ex_levels
      * rsem2     :: RSEM.genes.results
      ------------------------------------------------------

      Finds True Positives in Trinity data.

                                                   by khayer

EOF

unless ARGV.length == 6
  puts usage
  exit
end

trinity_file = ARGV[0]
rsem = ARGV[1]
truth_sequences_file = ARGV[2]
ex_levels = ARGV[3]
num = ARGV[4].to_i
rsem2 = ARGV[5]

sorted_expression_levels = get_expression_levels(ex_levels)
genes_that_should_be_in_gtf = get_genes_that_should_be_in_gtf(sorted_expression_levels,num)
truth_sequences = get_truth_sequences(truth_sequences_file)
expressed_isoforms = get_expressed_isoforms(rsem)
expressed_genes = get_expressed_genes(rsem2)
total_number_of_transcripts = expressed_isoforms.length

current_sequence = ""
false_positive = 0
weak_true_positive = 0
strong_true_positive = 0
weak_true_positive_by_spliceform = []
strong_true_positives_by_spliceforms = []
weak_false_positives_by_spliceforms = []

number_of_all_genes = 0
current_comp_name = ""

tmp_file = File.open("tmp_transcripts",'w')
#tmp_file_reverse = File.open("tmp_transcripts_reverse",'w')

File.open(trinity_file).each do |line|
  line.chomp!
  if line =~ /^>/ && current_sequence != "" &&
      expressed_isoforms.include?(current_comp_name) &&
      expressed_genes.include?(current_comp_name.split("_seq")[0])
    number_of_all_genes += 1
    STDERR.puts "#{( number_of_all_genes.to_f / total_number_of_transcripts )*100} %"
    #STDERR.puts "#{( number_of_all_genes.to_f / 66 ).to_f} %"
    #result = search_in(current_sequence)
    tmp_file.puts ">#{current_comp_name}"
    tmp_file.puts current_sequence
    #tmp_file.puts ">#{current_comp_name}_reverse"
    #tmp_file.puts get_reverse_complement(current_sequence)
    current_sequence = ""
  end

  if line =~ /^>/
    current_comp_name = line.split(" ")[0].split(">")[1]
    current_sequence = ""
    next
  end
  current_sequence += line
end

=begin
STDERR.puts false_positive
STDERR.puts weak_true_positive
STDERR.puts strong_true_positive
STDERR.puts false_negatives = $genes_that_should_be_in_gtf.length

puts "=========="
#puts "By number of splice forms:"
#puts "\t\t#{(1..10).to_a.join("\t")}"
#puts "StroTP\t#{strong_true_positives_by_spliceforms.join("\t")}"
#puts "WeakTP\t#{weak_true_positive_by_spliceform.join("\t")}"
#puts "allFP\t#{weak_false_positives_by_spliceforms.join("\t")}"
#puts "=========="
puts "Strongly True Positives\t#{strong_true_positive}"
puts "Weak True Positives\t#{weak_true_positive}"
puts "All False Positives\t#{false_positive}"
puts "All False Negatives\t#{false_negatives}"
puts "=========="
puts "All transcripts\t#{total_number_of_transcripts}"
=end

