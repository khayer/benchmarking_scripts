#!/usr/bin/env ruby

refseq = ARGV[0]
featurequantifications_refseq = ARGV[1]
out_stats_file = ARGV[2]
out_featurequantifications_refseq = ARGV[3]

max = 0
location = "chr1"
picked_splice_forms = []
current_splice_forms = []
statistics = []

File.open(refseq).each do |line|
  line.chomp!
  info = line.split("\t")

  if info[0] != location
    max = 0
    location = info[0]
    winner_splice_form = current_splice_forms[rand(current_splice_forms.length)]
    statistics[current_splice_forms.length] = 0 unless statistics[current_splice_forms.length]
    statistics[current_splice_forms.length] += 1
    picked_splice_forms << winner_splice_form if winner_splice_form != nil
    current_splice_forms = []
    current_splice_forms << info[-1]
  else
    start_position = info[2].to_i
    if max < start_position && !(current_splice_forms.empty?)
      end_position = info[3].to_i
      max = end_position
      winner_splice_form = current_splice_forms[rand(current_splice_forms.length)]
      picked_splice_forms << winner_splice_form
      statistics[current_splice_forms.length] = 0 unless statistics[current_splice_forms.length]
      statistics[current_splice_forms.length] += 1

      current_splice_forms = []
      current_splice_forms << info[-1]
    else
      current_splice_forms << info[-1]
    end

  end

end

statistics[current_splice_forms.length] = 0 unless statistics[current_splice_forms.length]
statistics[current_splice_forms.length] += 1
winner_splice_form = current_splice_forms[rand(current_splice_forms.length)]
picked_splice_forms << winner_splice_form if winner_splice_form != nil

out_stats_file_handle = File.open(
statistics.each_with_index do |stat,i|
  next unless stat
  out_stats_file_handle.puts "#{i}\t#{stat}"
end

feature_in_handler = File.open(featurequantifications_refseq,"r")
feature_out_handler = File.open(out_featurequantifications_refseq,"w")
gene_picked = false
length_of_transcript = 0

feature_in_handler.each do |line|
  if line =~ /Type/
    feature_out_handler.puts line
    length_of_transcript = 0
    next
  end
  if line =~ /-----------/
    feature_out_handler.puts line
    next
  end
  line.chomp!
  info = line.split("\t")
  if info.length == 2
    gene_picked = true if picked_splice_forms.index(info[0])
    feature_out_handler.puts line
    next
  end
  if gene_picked
    lines = []
    number_of_exons = 0
    while line =~ /chr/
      lines << line
      if line =~ /exon/
        number_of_exons += 1
        positions = info[-2].split(":")[1]
        start_position = positions.split("-")[0].to_i
        end_position = positions.split("-")[1].to_i
        length_of_transcript += end_position - start_position
      end
      line = feature_in_handler.readline().chomp!
      info = line.split("\t")
      if feature_in_handler.eof()
        lines << line
        if line =~ /exon/
          number_of_exons += 1
          positions = info[-2].split(":")[1]
          start_position = positions.split("-")[0].to_i
          end_position = positions.split("-")[1].to_i
          length_of_transcript += end_position - start_position
        end
        break
      end
    end
    lines.each do |l|
      inf = l.split("\t")
      case
      when l =~ /transcript/
        inf[-1] = length_of_transcript
      when l =~ /exon/
        inf[-1] = (length_of_transcript.to_f/number_of_exons.to_f).floor
      when l =~ /intron/
        inf[-1] = 1
      end
      feature_out_handler.puts inf.join("\t")
    end
    gene_picked = false
  else
    info[-1] = 0
    feature_out_handler.puts info.join("\t")
  end

end




