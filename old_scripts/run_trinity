#!/usr/bin/env ruby
require 'fileutils'


usage =<<EOF

      #{$0} sam results base

      ------------------------------------------------------
      * sam      :: sorted_sam_file
      * results  :: results.fa
      * base     :: trinity_base
      ------------------------------------------------------

      Run Trinity on forward.fa and reverse.fa

      Note:
      sed 's/a/\/1/g' *fwd.fa > simulated_reads_test2_fwd_tri.fa
      sed 's/b/\/2/g' *rev.fa > simulated_reads_test2_rev_tri.fa


                                                   by khayer

EOF

if ARGV.length != 3
  puts usage
  exit
end

############

### Functions
def run_trinity(fwd, rev)
  # Trinity.pl --seqType fa --JM 5G --CPU 2 --output trinity/
  # --left fwd.fa --right rev.fa > trinity.log 2>&1
  `rm -r trinity`
  cmd = "#{$trinity} --seqType fa --JM 25G --CPU 2 --output trinity/ --left #{fwd} --right #{rev} > trinity.log 2>&1"
  STDERR.puts cmd
  `#{cmd}`
  $?.exitstatus
end

def run_aligner(fwd, rev)
  `rm -r bowtie_out`
  cmd = "#{$aligner} --left #{fwd} --right #{rev} --target trinity/Trinity.fasta --aligner bowtie --seqType fa --SS_lib_type FR > aligner.log 2>&1"
  STDERR.puts cmd
  `#{cmd}`
  $?.exitstatus
end

def run_rsem()
  `rm -r RSEM* TRANS.*`
  cmd = "#{$rsem} --transcripts trinity/Trinity.fasta --name_sorted_bam bowtie_out/bowtie_out.nameSorted.sam.+.sam.PropMapPairsForRSEM.bam --paired > rsem.log 2>&1"
  STDERR.puts cmd
  `#{cmd}`
  $?.exitstatus
end

def get_chromosome_lengths(sam_file)
  chromosome_lengths = {}
  File.open(sam_file).each do |line|
    line.chomp!
    break unless line =~ /^@/
    next unless line =~ /^@SQ/
    fields = line.split(":")
    length = fields[-1]
    chr = fields[1].split(" ")[0]
    chromosome_lengths[chr] = length
  end
  chromosome_lengths
end

def make_fasta_file(fwd_reads,rev_reads)
  fwd_fa = File.open("fwd.fa",'w')
  rev_fa = File.open("rev.fa",'w')
  counter = 0
  fwd_reads.each do |name,sequence|
    if rev_reads[name]
      counter += 1
      fwd_fa.puts ">#{name}/1"
      fwd_fa.puts sequence
      rev_fa.puts ">#{name}/2"
      rev_fa.puts rev_reads[name]
    end
  end
  fwd_fa.close
  rev_fa.close
  counter
end

def find_valid_isoforms()
  valid_isoforms = []
  File.open("RSEM.isoforms.results").each do |line|
    line.chomp!
    next unless line =~ /^comp/
    fields = line.split("\t")
    valid_isoforms << fields[0] if fields[-1].to_f >= 50.0
  end
  valid_isoforms
end


def compute_trinity(fwd_reads,rev_reads,results)
  #File.delete("trinity")
  counter = make_fasta_file(fwd_reads,rev_reads)
  return false if counter < 100
  exitstatus = run_trinity("fwd.fa", "rev.fa")
  return false if exitstatus != 0
  exitstatus = run_aligner("fwd.fa", "rev.fa")
  return false if exitstatus != 0
  exitstatus = run_rsem()
  return false if exitstatus != 0
  valid_isoforms = find_valid_isoforms()
  results_file = File.open(results,'a')
  sequence = ""
  name = ""
  File.open("trinity/Trinity.fasta").each do |line|
    if line =~ /^>comp/
      unless sequence.empty? || name.empty?
        fields = name.split(" ")
        identifier = fields[0].split(">")[1]
        if valid_isoforms.index(identifier)
          results_file.puts name
          results_file.puts sequence
        end
      end
      name = line
      sequence = ""
    else
      sequence += line
    end
  end
  fields = name.split(" ")
  identifier = fields[0].split(">")[1]
  if valid_isoforms.index(identifier)
    results_file.puts name
    results_file.puts sequence
  end
  results_file.close
  true
end

def cleanup()
  `rm -r trinity`
  `rm -r bowtie_out`
  `rm -r RSEM* TRANS.*`
  `rm fwd.fa rev.fa`
  `rm aligner.log trinity.log rsem.log`
end


#############

### Main
sam = ARGV[0]
results = ARGV[1]
base = ARGV[2]
`rm #{results}`
region_start = 0

### Settings
$trinity = "#{base}/Trinity.pl"
$aligner = "#{base}/util/alignReads.pl"
# alignReads.pl --left fwd.fa --right rev.fa --seqType fa
# --target trinity/Trinity.fasta --aligner bowtie -- -p 2
# > trinity_realign.log 2>&1
$rsem = "#{base}/util/RSEM_util/run_RSEM.pl"
# run_RSEM.pl --transcript trinity/Trinity.fasta
# --name_sorted_bam bowtie_out/bowtie_out.nameSorted.PropMapPairsForRSEM.bam
# --paired > trinity_rsem.log 2>&1

chromosome_lengths = get_chromosome_lengths(sam)
current_chromosome = "chrXY"
PositiveInfinity = +1.0/0.0
NegativeInfinity = -1.0/0.0
smallest = PositiveInfinity
highest = NegativeInfinity
fwd_reads = {}
rev_reads = {}
sequence_names = []

File.open(sam).each do |line|
  line.chomp!
  # Get rid of header
  next if line =~ /^@/
  sam_fields = line.split(" ")
  # Get rid if pair did not in same area
  next if sam_fields[4] == "0"
  length = sam_fields[5].split(/\D/).inject{|sum,x| sum.to_i + x.to_i }
  if sam_fields[3].to_i > highest || current_chromosome != sam_fields[2]
    if fwd_reads != {} && rev_reads != {}
      result = compute_trinity(fwd_reads,rev_reads,results)
      if result
        STDERR.puts "Trinity successful for #{current_chromosome}:#{highest}"
      else
        STDERR.puts "Trinity unsuccessful for #{current_chromosome}:#{highest}"
      end
    end
    fwd_reads = {}
    rev_reads = {}
    #puts length
    #puts current_chromosome
    highest = sam_fields[3].to_i + length.to_i
    #puts "new highest #{highest}"
    current_chromosome = sam_fields[2]
  end

  sequence_names << sam_fields[0] unless sequence_names.include?(sam_fields[0])
  # is first pair?
  bit_flag = sam_fields[1].to_i
  if bit_flag[6] == 1
    fwd_reads[sam_fields[0]] = sam_fields[9]
  else
    rev_reads[sam_fields[0]] = sam_fields[9]
  end
  if sam_fields[7].to_i > sam_fields[3].to_i
    highest = sam_fields[7].to_i + 100
  else
    highest = sam_fields[3].to_i + length.to_i
  end
end

cleanup()

########
